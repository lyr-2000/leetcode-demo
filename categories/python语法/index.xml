<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python语法 on 凌冬的代码博客站</title><link>https://lyr-2000.github.io/code/categories/python%E8%AF%AD%E6%B3%95/</link><description>Recent content in python语法 on 凌冬的代码博客站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>LYR</copyright><lastBuildDate>Wed, 18 May 2022 11:40:28 +0800</lastBuildDate><atom:link href="https://lyr-2000.github.io/code/categories/python%E8%AF%AD%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>yield生成器</title><link>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E8%AF%AD%E6%B3%95/yield%E7%94%9F%E6%88%90%E5%99%A8/</link><pubDate>Wed, 18 May 2022 11:40:28 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E8%AF%AD%E6%B3%95/yield%E7%94%9F%E6%88%90%E5%99%A8/</guid><description>yield 生成器语法 1 2 3 4 5 6 7 8 9 10 def fab(max): n, a, b = 0, 0, 1 while n &amp;lt; max: yield b # 使用 yield # print b a, b = b, a + b n = n + 1 for n in fab(5): print n 通过这个 yield ,我们就不需要在 while</description></item><item><title>函数</title><link>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E8%AF%AD%E6%B3%95/%E5%87%BD%E6%95%B0/</link><pubDate>Wed, 18 May 2022 00:24:40 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python%E8%AF%AD%E6%B3%95/%E5%87%BD%E6%95%B0/</guid><description>函数定义 参考学习教程 脚本中函数定义要放在函数调用之前，因为这是解释型语言 1 2 3 4 def say(); print(&amp;#34;hello world&amp;#34;) say() # say调用放在定义之后 注释 名字 描述 单行注释 #, 注意</description></item></channel></rss>