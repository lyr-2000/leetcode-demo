<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基础入门 on 凌冬的代码博客站</title><link>https://lyr-2000.github.io/code/categories/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</link><description>Recent content in 基础入门 on 凌冬的代码博客站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>LYR</copyright><lastBuildDate>Sat, 07 Dec 2024 22:52:01 +0800</lastBuildDate><atom:link href="https://lyr-2000.github.io/code/categories/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>io</title><link>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/io%E6%A0%87%E5%87%86%E6%AC%BE%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 07 Dec 2024 22:52:01 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/io%E6%A0%87%E5%87%86%E6%AC%BE%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>字符串大小比较 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;os&amp;#34; &amp;#34;bufio&amp;#34; ) func main(){ input := bufio.NewReader(os.Stdin) s1,_ := input.ReadString(&amp;#39;\n&amp;#39;) s2,_ := input.ReadString(&amp;#39;\n&amp;#39;) strings.ToLower(s1) strings.ToLower(s2) flag := strings.Compare(s1,s2) if flag==0{ fmt.Print(&amp;#34;=&amp;#34;) }else if flag&amp;lt; 0{ fmt.Print(&amp;#34;&amp;lt;&amp;#34;) }else{ fmt.Print(&amp;#34;&amp;gt;&amp;#34;) } } 去掉多</description></item><item><title>最大数和他的位置</title><link>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E5%88%A4%E6%96%AD/%E6%9C%80%E5%A4%A7%E6%95%B0%E5%92%8C%E4%BB%96%E7%9A%84%E4%BD%8D%E7%BD%AE/</link><pubDate>Sat, 07 Dec 2024 22:46:04 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E5%88%A4%E6%96%AD/%E6%9C%80%E5%A4%A7%E6%95%B0%E5%92%8C%E4%BB%96%E7%9A%84%E4%BD%8D%E7%BD%AE/</guid><description>给定 100 个整数，请你找出其中最大的数字，以及它的输入位置（位置从 1 开始）。 输入格式 共 100 行，每行包含一个整数。 输出格式 第一行输出最大的数字。 第二</description></item><item><title>go语法必知</title><link>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go%E8%AF%AD%E6%B3%95%E5%BF%85%E7%9F%A5/</link><pubDate>Wed, 23 Nov 2022 00:13:07 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go%E8%AF%AD%E6%B3%95%E5%BF%85%E7%9F%A5/</guid><description>go语法坑总结 闭包延时绑定 闭包里面使用闭包外的参数，其值最终调用时候确定下来的。 闭包很强大，但是要小心延时绑定, 一般 可以在代码块前面 重新定义</description></item><item><title>lc.35.搜索插入位置</title><link>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E5%88%A4%E6%96%AD/lc.35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</link><pubDate>Tue, 22 Nov 2022 23:39:47 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E5%88%A4%E6%96%AD/lc.35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</guid><description>35. 搜索插入位置 Description Difficulty: 简单 Related Topics: 数组 , 二分查找 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会</description></item><item><title>lc.1.两数之和</title><link>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E5%88%A4%E6%96%AD/lc.1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link><pubDate>Tue, 22 Nov 2022 22:49:43 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E5%88%A4%E6%96%AD/lc.1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid><description>1. 两数之和 Description Difficulty: 简单 Related Topics: 数组 , 哈希表 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数</description></item></channel></rss>