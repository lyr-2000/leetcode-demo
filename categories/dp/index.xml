<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dp on 凌冬的代码博客站</title><link>https://lyr-2000.github.io/code/categories/dp/</link><description>Recent content in dp on 凌冬的代码博客站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>LYR</copyright><lastBuildDate>Fri, 07 Oct 2022 18:22:13 +0800</lastBuildDate><atom:link href="https://lyr-2000.github.io/code/categories/dp/index.xml" rel="self" type="application/rss+xml"/><item><title>01背包问题</title><link>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 07 Oct 2022 18:22:13 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid><description>01 背包问题 有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。 第 i 件物品的体积是 vi，价值是 wi。 求解将哪些物品装入背包，可使这些物品的总</description></item><item><title>lc.300.最长上升子序列</title><link>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/lc.300.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</link><pubDate>Sun, 02 Oct 2022 23:09:27 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/lc.300.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</guid><description>300. 最长递增子序列 Description Difficulty: 中等 Related Topics: 数组 , 二分查找 , 动态规划 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。 子序列是由数组派生而来的序列，删除</description></item><item><title>动态规划基础</title><link>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/</link><pubDate>Wed, 14 Sep 2022 00:01:43 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/</guid><description>动态规划基础理解 阶段，状态、决策 重叠子问题 找零钱问题 最长公共子序列 例题 lcs lis 乘积的最大子数组 经典例题 零钱兑换问题： 搜索遍历整个状态空间 graph LR coin18--&amp;gt;coin9_1--&amp;gt;coin_9_2 coin18--&amp;gt;coin17_1--&amp;gt;coin16_2</description></item><item><title>通配符匹配算法</title><link>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</link><pubDate>Wed, 11 May 2022 20:02:48 +0800</pubDate><guid>https://lyr-2000.github.io/code/post/%E7%AE%97%E6%B3%95/dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</guid><description>通配符匹配算法 ​ 参考leetcode44.通配符匹配 给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 &amp;lsquo;?&amp;rsquo; 和 &amp;lsquo;*&amp;rsquo; 的通配符匹配。 &amp;lsquo;?&amp;rsquo; 可以匹配任何单个字符</description></item></channel></rss>